/* This file is generated by glib-genmarshal, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */
#ifndef __CLAWS_MARSHAL_MARSHAL_H__
#define __CLAWS_MARSHAL_MARSHAL_H__

#include <glib-object.h>

G_BEGIN_DECLS

/* VOID:POINTER (claws-marshal.list:1) */
#define claws_marshal_VOID__POINTER	g_cclosure_marshal_VOID__POINTER

/* VOID:INT,POINTER (claws-marshal.list:2) */
extern
void claws_marshal_VOID__INT_POINTER (GClosure     *closure,
                                      GValue       *return_value,
                                      guint         n_param_values,
                                      const GValue *param_values,
                                      gpointer      invocation_hint,
                                      gpointer      marshal_data);

/* VOID:OBJECT,OBJECT (claws-marshal.list:3) */
extern
void claws_marshal_VOID__OBJECT_OBJECT (GClosure     *closure,
                                        GValue       *return_value,
                                        guint         n_param_values,
                                        const GValue *param_values,
                                        gpointer      invocation_hint,
                                        gpointer      marshal_data);

/* VOID:INT,INT,BOXED (claws-marshal.list:4) */
extern
void claws_marshal_VOID__INT_INT_BOXED (GClosure     *closure,
                                        GValue       *return_value,
                                        guint         n_param_values,
                                        const GValue *param_values,
                                        gpointer      invocation_hint,
                                        gpointer      marshal_data);

/* VOID:INT,INT (claws-marshal.list:5) */
extern
void claws_marshal_VOID__INT_INT (GClosure     *closure,
                                  GValue       *return_value,
                                  guint         n_param_values,
                                  const GValue *param_values,
                                  gpointer      invocation_hint,
                                  gpointer      marshal_data);

/* VOID:INT (claws-marshal.list:6) */
#define claws_marshal_VOID__INT	g_cclosure_marshal_VOID__INT

/* VOID:VOID (claws-marshal.list:7) */
#define claws_marshal_VOID__VOID	g_cclosure_marshal_VOID__VOID

/* VOID:VOID,VOID (claws-marshal.list:8) */
extern
void claws_marshal_VOID__VOID_VOID (GClosure     *closure,
                                    GValue       *return_value,
                                    guint         n_param_values,
                                    const GValue *param_values,
                                    gpointer      invocation_hint,
                                    gpointer      marshal_data);

/* VOID:ENUM,FLOAT,BOOLEAN (claws-marshal.list:9) */
extern
void claws_marshal_VOID__ENUM_FLOAT_BOOLEAN (GClosure     *closure,
                                             GValue       *return_value,
                                             guint         n_param_values,
                                             const GValue *param_values,
                                             gpointer      invocation_hint,
                                             gpointer      marshal_data);

/* VOID:ENUM,FLOAT (claws-marshal.list:10) */
extern
void claws_marshal_VOID__ENUM_FLOAT (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);

/* VOID:POINTER,INT (claws-marshal.list:11) */
extern
void claws_marshal_VOID__POINTER_INT (GClosure     *closure,
                                      GValue       *return_value,
                                      guint         n_param_values,
                                      const GValue *param_values,
                                      gpointer      invocation_hint,
                                      gpointer      marshal_data);

/* VOID:POINTER,POINTER,POINTER (claws-marshal.list:12) */
extern
void claws_marshal_VOID__POINTER_POINTER_POINTER (GClosure     *closure,
                                                  GValue       *return_value,
                                                  guint         n_param_values,
                                                  const GValue *param_values,
                                                  gpointer      invocation_hint,
                                                  gpointer      marshal_data);

/* VOID:ENUM (claws-marshal.list:13) */
#define claws_marshal_VOID__ENUM	g_cclosure_marshal_VOID__ENUM


G_END_DECLS

#endif /* __CLAWS_MARSHAL_MARSHAL_H__ */
